m_description = "Hadronic D Ntuple";
m_shortName = "dnt";
BlockDescriptor* thisBlock;
thisBlock = new BlockDescriptor("GENERAL");
thisBlock->addVar(*(new VarDescriptor("run", "", "", &run, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("event", "", "", &event, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("ecm", "", "", &ecm, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("xangle", "", "", &xangle, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("eneu", "", "", &eneu, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("echg", "", "", &echg, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("evtmm2", "", "", &evtmm2, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("l1trig", "", "", &l1trig, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("nbunch", "", "", &nbunch, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("bunch", "", "", &bunch, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("l1trig2", "", "", &l1trig2, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("pxcm", "", "", &pxcm, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("pycm", "", "", &pycm, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("pzcm", "", "", &pzcm, FLOAT)));
varList.push_back(*thisBlock);
thisBlock = new BlockDescriptor("TRACK");
thisBlock->addVar(*(new VarDescriptor("ntrack", "", "[0,100]", &ntrack, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("trident", "ntrack", "", &trident, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("trpie", "ntrack", "", &trpie, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trpipx", "ntrack", "", &trpipx, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trpipy", "ntrack", "", &trpipy, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trpipz", "ntrack", "", &trpipz, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trpip", "ntrack", "", &trpip, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trke", "ntrack", "", &trke, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trkpx", "ntrack", "", &trkpx, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trkpy", "ntrack", "", &trkpy, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trkpz", "ntrack", "", &trkpz, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trchg", "ntrack", "", &trchg, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trz0", "ntrack", "", &trz0, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trd0", "ntrack", "", &trd0, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trcosth", "ntrack", "", &trcosth, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trphi0", "ntrack", "", &trphi0, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trdrhitf", "ntrack", "", &trdrhitf, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trzdhitf", "ntrack", "", &trzdhitf, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trhitf", "ntrack", "", &trhitf, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trchi2", "ntrack", "", &trchi2, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trchi2dof", "ntrack", "", &trchi2dof, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("trsigpi", "ntrack", "", &trsigpi, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trsigk", "ntrack", "", &trsigk, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trrichpll", "ntrack", "", &trrichpll, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trrichpnp", "ntrack", "", &trrichpnp, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("trrichkll", "ntrack", "", &trrichkll, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trrichknp", "ntrack", "", &trrichknp, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("trtaginfo", "ntrack", "", &trtaginfo, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("trfabort", "ntrack", "", &trfabort, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("trrichphp", "ntrack", "", &trrichphp, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("trrichkhp", "ntrack", "", &trrichkhp, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("trdb", "ntrack", "", &trdb, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trdpthmu", "ntrack", "", &trdpthmu, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trroceid", "ntrack", "", &trroceid, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("trtrkman", "ntrack", "", &trtrkman, INTEGER)));
varList.push_back(*thisBlock);
thisBlock = new BlockDescriptor("SHOWER");
thisBlock->addVar(*(new VarDescriptor("nshow", "", "[0,1000]", &nshow, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("sident", "nshow", "", &sident, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("se", "nshow", "", &se, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("spx", "nshow", "", &spx, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("spy", "nshow", "", &spy, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("spz", "nshow", "", &spz, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("sphi", "nshow", "", &sphi, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("scosth", "nshow", "", &scosth, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("se9o25uok", "nshow", "", &se9o25uok, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("shot", "nshow", "", &shot, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("sdettype", "nshow", "", &sdettype, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("strmatch", "nshow", "", &strmatch, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("strme", "nshow", "", &strme, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("strdist", "nshow", "", &strdist, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("se9o25", "nshow", "", &se9o25, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("se9o25u", "nshow", "", &se9o25u, FLOAT)));
varList.push_back(*thisBlock);
thisBlock = new BlockDescriptor("PI0");
thisBlock->addVar(*(new VarDescriptor("npi0", "", "[0,1000]", &npi0, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("pi0ident", "npi0", "", &pi0ident, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("pi0mass", "npi0", "", &pi0mass, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("pi0chi2", "npi0", "", &pi0chi2, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("pi0e", "npi0", "", &pi0e, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("pi0px", "npi0", "", &pi0px, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("pi0py", "npi0", "", &pi0py, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("pi0pz", "npi0", "", &pi0pz, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("pi0merr", "npi0", "", &pi0merr, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("pi0dau1", "npi0", "", &pi0dau1, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("pi0dau2", "npi0", "", &pi0dau2, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("pi0istype1", "npi0", "", &pi0istype1, INTEGER)));
varList.push_back(*thisBlock);
thisBlock = new BlockDescriptor("ETA");
thisBlock->addVar(*(new VarDescriptor("neta", "", "[0,1000]", &neta, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("etaident", "neta", "", &etaident, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("etamass", "neta", "", &etamass, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("etachi2", "neta", "", &etachi2, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("etae", "neta", "", &etae, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("etapx", "neta", "", &etapx, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("etapy", "neta", "", &etapy, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("etapz", "neta", "", &etapz, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("etamerr", "neta", "", &etamerr, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("etadau1", "neta", "", &etadau1, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("etadau2", "neta", "", &etadau2, INTEGER)));
varList.push_back(*thisBlock);
thisBlock = new BlockDescriptor("KSHORT");
thisBlock->addVar(*(new VarDescriptor("nks", "", "[0,50]", &nks, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("ksident", "nks", "", &ksident, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("ksmass", "nks", "", &ksmass, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("kse", "nks", "", &kse, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("kspx", "nks", "", &kspx, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("kspy", "nks", "", &kspy, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("kspz", "nks", "", &kspz, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("kschi2", "nks", "", &kschi2, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("ksrad", "nks", "", &ksrad, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("ksraderr", "nks", "", &ksraderr, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("ksdau1", "nks", "", &ksdau1, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("ksdau2", "nks", "", &ksdau2, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("ksflsig", "nks", "", &ksflsig, FLOAT)));
varList.push_back(*thisBlock);
thisBlock = new BlockDescriptor("DTAG");
thisBlock->addVar(*(new VarDescriptor("ndcand", "", "[0,1000]", &ndcand, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("dmode", "ndcand", "", &dmode, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("dmbc", "ndcand", "", &dmbc, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("ddeltae", "ndcand", "", &ddeltae, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("ddeltaeerr", "ndcand", "", &ddeltaeerr, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("dmraw", "ndcand", "", &dmraw, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("dmrawerr", "ndcand", "", &dmrawerr, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("dkchi2", "ndcand", "", &dkchi2, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("de", "ndcand", "", &de, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("dpx", "ndcand", "", &dpx, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("dpy", "ndcand", "", &dpy, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("dpz", "ndcand", "", &dpz, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("ddau1", "ndcand", "", &ddau1, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("ddau2", "ndcand", "", &ddau2, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("ddau3", "ndcand", "", &ddau3, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("ddau4", "ndcand", "", &ddau4, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("dcsign", "ndcand", "", &dcsign, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("lepveto", "ndcand", "", &lepveto, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("ddau5", "ndcand", "", &ddau5, INTEGER)));
varList.push_back(*thisBlock);
thisBlock = new BlockDescriptor("MMISS");
thisBlock->addVar(*(new VarDescriptor("nmiss", "", "[0,10000]", &nmiss, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mmode", "nmiss", "", &mmode, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mdcand", "nmiss", "", &mdcand, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mtrack1", "nmiss", "", &mtrack1, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mtrack2", "nmiss", "", &mtrack2, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mmsq", "nmiss", "", &mmsq, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("mpx", "nmiss", "", &mpx, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("mpy", "nmiss", "", &mpy, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("mpz", "nmiss", "", &mpz, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("me", "nmiss", "", &me, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("mbestmbc", "nmiss", "", &mbestmbc, FLOAT)));
varList.push_back(*thisBlock);
thisBlock = new BlockDescriptor("DDOUBLETAG");
thisBlock->addVar(*(new VarDescriptor("nddcand", "", "[0,200]", &nddcand, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("d", "nddcand", "", &d, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("dbar", "nddcand", "", &dbar, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("ddmode", "nddcand", "", &ddmode, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("cosangle", "nddcand", "", &cosangle, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("chi2vd", "nddcand", "", &chi2vd, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("chi2vdb", "nddcand", "", &chi2vdb, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("chi2ed", "nddcand", "", &chi2ed, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("chi2edb", "nddcand", "", &chi2edb, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("chi2md", "nddcand", "", &chi2md, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("chi2mdb", "nddcand", "", &chi2mdb, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("chi2vddb", "nddcand", "", &chi2vddb, FLOAT)));
varList.push_back(*thisBlock);
thisBlock = new BlockDescriptor("MC");
thisBlock->addVar(*(new VarDescriptor("mcdmode", "", "", &mcdmode, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mcdbmode", "", "", &mcdbmode, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mcdmatch", "ndcand", "", &mcdmatch, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("nmcpart", "", "[0,50]", &nmcpart, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mcident", "nmcpart", "", &mcident, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mcpdgid", "nmcpart", "", &mcpdgid, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mcparent", "nmcpart", "", &mcparent, INTEGER)));
thisBlock->addVar(*(new VarDescriptor("mce", "nmcpart", "", &mce, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("mcpx", "nmcpart", "", &mcpx, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("mcpy", "nmcpart", "", &mcpy, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("mcpz", "nmcpart", "", &mcpz, FLOAT)));
thisBlock->addVar(*(new VarDescriptor("mctruth", "nmcpart", "", &mctruth, INTEGER)));
varList.push_back(*thisBlock);
